USE [APIDEMO]
GO

/****** Object:  Table [dbo].[Employees]    Script Date: 07-10-2021 12:55:24 ******/
USE master ;  
GO  
CREATE DATABASE APIDEMO 


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Employees](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[Gender] [nvarchar](50) NULL,
	[Salary] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

1.DDL Command
CREATE
ALTER
DROP
TRUNCATE


1.Create

USE [APIDEMO]
GO

/****** Object:  Table [dbo].[Employees]    Script Date: 07-10-2021 12:55:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Traning](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[Gender] [nvarchar](50) NULL,
	[Salary] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

2.Alter

ALTER TABLE Traning
ADD Email varchar(255);


3.DROP TABLE Traning;

4.TRUNCATE TABLE Traning;

DML-Data Manupalation Language
1.INSERT INTO Traning VALUES ('Depak','mahesh','male',3400);
2.UPDATE Traning Set FirstName= 'Vivek' WHERE ID = 1;
3.Delete from Traning
4.Select * from Traning.

Primary Key And Foriegn Key


1.Primary Key
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

2.Foriegn Key
CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(ID)
);

Group By

SELECT COUNT(Id)as Id
FROM Teacher
GROUP BY TeacherName
HAVING COUNT(Id) > 1

where 

select * from Teacher Where TeacherName='Hardan'

Inner join

SELECT Teacher.TeacherName,Student.StudentName
FROM Teacher
INNER JOIN Student ON Teacher.Id=Student.F_Teacher;

Left Join

SELECT Teacher.TeacherName,Student.StudentName
FROM Teacher
Left JOIN Student ON Teacher.Id=Student.F_Teacher;

Right join

SELECT Teacher.TeacherName,Student.StudentName
FROM Teacher
Right JOIN Student ON Teacher.Id=Student.F_Teacher;

Full Outer join

SELECT Teacher.TeacherName,Student.StudentName
FROM Teacher
FULL OUTER JOIN Student ON Teacher.Id=Student.F_Teacher;

Self Join

SELECT s1.StudentName,s2.FatherName
FROM Student s1,Student s2
Where s1.Id=s2.F_Teacher;

Indexing
1.Clustered Index.
2.Non-Clustered Index.


CREATE INDEX idx_lastname
ON Persons (LastName);

Clouse
1. GROUP BY
2.Oreder By
3.Having Clouse.

select Teacher.Id as TID,Teacher.TeacherName,COUNT(Student.Id) as TotalStudent from Teacher
join Student
on Teacher.Id=Student.F_Teacher
Group By Student.F_Teacher,Teacher.TeacherName,Teacher.Id
Order By Teacher.Id ASC


Operator In Sql
1.Arithmatic operator-
1.Add
SELECT 30 + 20;

2Subtract
SELECT 30 - 20;

3.Multiply
SELECT 30 * 20;

4.Divide
SELECT 30 / 10;

5.Modulo
SELECT 17 % 5;

SQL Comparison Operators

1.Equal to
SELECT * FROM Employees
WHERE Salary = 3000;

2.Greater than
SELECT * FROM Employees
WHERE Salary > 3000;

3.Less than
SELECT * FROM Employees
WHERE Salary < 4000;

4.Greater than or equal to
SELECT * FROM Employees
WHERE Salary >= 3000;

5.Less than or equal to
SELECT * FROM Employees
WHERE Salary <= 3000;

6.Not equal to
SELECT * FROM Employees
WHERE Salary <> 3000;


SQL Compound Operators

Operator	Description
+=	Add equals
-=	Subtract equals
*=	Multiply equals
/=	Divide equals
%=	Modulo equals
&=	Bitwise AND equals
^-=	Bitwise exclusive equals
|*=	Bitwise OR equals

SQL Logical Operators
Operator	Description
ALL	        TRUE if all of the subquery values meet the condition	
SELECT *
FROM Orders
WHERE PersonID = ALL (SELECT ID FROM Persons WHERE ID = 1);


AND	        TRUE if all the conditions separated by AND is TRUE
SELECT * FROM Orders
WHERE OrderID = 101 AND OrderNumber = 102;

	
ANY	        TRUE if any of the subquery values meet the condition	
SELECT * FROM Orders
WHERE OrderNumber > ANY (SELECT ID FROM Persons WHERE Age > 20);


BETWEEN	        TRUE if the operand is within the range of comparisons	
SELECT * FROM Persons
WHERE Age BETWEEN 10 AND 60;


EXISTS	        TRUE if the subquery returns one or more records
SELECT * FROM Persons
WHERE EXISTS (SELECT OrderNumber FROM Orders WHERE Persons.ID = Orders.PersonID);

	
IN	        TRUE if the operand is equal to one of a list of expressions	
SELECT * FROM Orders
WHERE OrderID IN (101,102); 
  

LIKE	        TRUE if the operand matches a pattern	
SELECT * FROM Persons
WHERE FirstName LIKE 'h%';


NOT	        Displays a record if the condition(s) is NOT TRUE
SELECT * FROM Persons
WHERE FirstName not LIKE 'r%';

	
OR	        TRUE if any of the conditions separated by OR is TRUE	
SELECT * FROM Persons
WHERE LastName = 'vimla' OR LastName='Hardan';


SOME	        TRUE if any of the subquery values meet the condition
SELECT * FROM Persons
WHERE Age > SOME (SELECT PersonID FROM Orders WHERE PersonID > 1);


Types Of Table
1.User table
CREATE TABLE [dbo].[Employees](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[Gender] [nvarchar](50) NULL,
	[Salary] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO



2.Local Temporary Tables
create table #tb 
(  
column_name varchar(20),  
column_no int  
)



3. Global Temporary Tables
create table ##GlobalTemporaryTable  
(  
column_name varchar(20),  
column_no int  
)


1.Simple Stored Procedure
CREATE PROCEDURE SimplePro
AS
Begin
SELECT * FROM Employees
End

exec SimplePro


2.Stored Procedure With Multiple Parameters.
Create PROCEDURE ProWithInputvar
@firstname nvarchar(30),
@salary nvarchar(30)
AS
Begin
SELECT * FROM Employees where FirstName=@firstname or Salary=@salary
End

exec ProWithInputvar @firstname='hardan',@salary=3000

3.Stored Procedure with Nullable Input Variables
Alter PROCEDURE ProWithInputNull
@firstname nvarchar(30)=Null,
@salary nvarchar(30)=Null
AS
Begin
IF @firstname IS NOT NULL AND @salary IS NOT NULL
SELECT * FROM Employees where FirstName=@firstname or Salary=@salary
ELSE IF @firstname IS NULL AND @salary IS NULL 
SELECT * FROM Employees
End

exec ProWithInputNull @firstname='hardan',@salary=3000
exec ProWithInputNull



13.PIVOT Example

SELECT [Year], Pankaj,Rahul,Sandeep FROM   
(SELECT Name, [Year] , Sales FROM Employee )Tab1  
PIVOT  
(  
SUM(Sales) FOR Name IN (Pankaj,Rahul,Sandeep)) AS Tab2  
ORDER BY [Tab2].[Year] 

8.SQL Functions:-
Aggregate Functions
1.SUM()
SELECT SUM(Salary)
FROM Employees;

2.COUNT() 
SELECT Count(Salary)
FROM Employees;

3.AVG() 
SELECT Avg(Salary)
FROM Employees;

4.MIN()
SELECT Min(Salary)
FROM Employees;

5.MAX()
SELECT Max(Salary)
FROM Employees;


Scalar Functions



14.Cursor:-A cursor in SQL is a temporary work area created in system memory when a SQL statement is executed.
 A SQL cursor is a set of rows together with a pointer that identifies a current row. It is a database object to retrieve data from a result set one row at a time. 
It is useful when we want to manipulate the record of a table in a singleton method, in other words, one row at a time. In other words, a cursor can hold more than one row but can process only one row at a time. The set of rows the cursor holds is called the active set.
 
Types of Cursors in SQL
 
There are the following two types of cursors in SQL:
Implicit Cursor
Explicit Cursor
Implicit Cursor
 
These types of cursors are generated and used by the system during the manipulation of a DML query (INSERT, UPDATE, and DELETE). An implicit cursor is also generated by the system when a single row is selected by a SELECT command.
 
Explicit Cursor
 
This type of cursor is generated by the user using a SELECT command. An explicit cursor contains more than one row, but only one row can be processed at a time. 
An explicit cursor moves one by one over the records. An explicit cursor uses a pointer that holds the record of a row. 
After fetching a row, the cursor pointer moves to the next row.
 

15.Trigger:-Creates a DML, DDL, or logon trigger. A trigger is a special type of stored procedure that automatically runs when an event occurs in the database server.
 DML triggers run when a user tries to modify data through a data manipulation language (DML) event. DML events are INSERT, UPDATE, or DELETE statements on a table or view. These triggers fire when any valid event fires, 
whether table rows are affected or not. For more information


16.View:-A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.
Example
CREATE  VIEW [EmpSalary] AS
SELECT FirstName,Salary
FROM Employees


Select a View:-select * from EmpSalary


DROP VIEW [EmpSalary];


17.SQL TOP, LIMIT and FETCH FIRST Examples

SELECT TOP 2 * FROM Employees;

SELECT TOP 10 PERCENT * FROM Employees;

18.
It is not possible to test for NULL values with comparison operators, such as =, <, or <>.

We will have to use the IS NULL and IS NOT NULL operators instead.
1.SELECT *
FROM Employees
WHERE FirstName Is NOT NULL;



2.SELECT *
FROM Employees
WHERE FirstName Is NULL;


19.The CASE statement goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.
If there is no ELSE part and no conditions are true, it returns NULL.
SELECT FirstName
FROM Employees
ORDER BY
(CASE
    WHEN FirstName IS NULL THEN LastName
    ELSE FirstName
END);


20.IIF 
1.SELECT IIF(salary>1000, 'YES', 'NO')as Status from Employees;
2.SELECT 
IIF(Salary<4000, 'MORE', 'LESS')Salary
FROM Employees;


21.In a typical Microsoft SQL Server data warehouse, quite often during the ETL cycle you need to perform INSERT, UPDATE and DELETE operations on a target table by matching the records from the source table. 
USE APIDEMO
GO
    
MERGE Student AS Target
USING Teacher	AS Source
ON Source.ID = Target.ID
    
-- For Inserts
WHEN NOT MATCHED BY Target THEN
    INSERT (StudentName, Gender) 
    VALUES (Source.Id,Source.TeacherName)
    
-- For Updates
WHEN MATCHED THEN UPDATE SET
    Target.StudentName	= Source.TeacherName,
    Target.Gender		= Source.TeacherName
    
-- For Deletes
WHEN NOT MATCHED BY Source THEN
    DELETE;


22.Loops In Sql


WHILE – While the loop condition is true, we’ll execute the code inside that loop

DECLARE @Counter INT 
SET @Counter=1
WHILE ( @Counter <= 5)
BEGIN
    PRINT 'Hi' select * from Employees
    SET @Counter  = @Counter  + 1
END

DO … WHILE – Works in the same manner as the WHILE loop, but the loop condition is tested at the end of the loop.
WHILE loops and DO … WHILE loops are very similar and could easily simulate each other. REPEAT … UNTIL (Pascal) is similar to DO … WHILE loop and the loop shall iterate until we “reach” that condition

DECLARE @I INT=1;
WHILE (1=1)              -- DO
 BEGIN
  PRINT 'hi' Select * from Employees;
  SET @I+=1;
  IF NOT (@I<=10) BREAK; -- WHILE @I<=10
 END

FOR – By definition, this loop shall be used to run code inside the loop for the number of times you’ll exactly know before this loop starts. 
That is true in most cases, and such a loop (if available) should be used in such a manner (to avoid complicated code), but still, you could change the number of times it executes inside the loop

23.SQL Pagination:-In terms of the SQL Server, the aim of the pagination is, dividing a resultset into discrete pages with the help of the query. When the OFFSET and FETCH arguments are used in with the ORDER BY clause in a SELECT statement, it will be a pagination solution for SQL Server.

OFFSET argument specifies how many rows will be skipped from the resultset of the query. In the following example, the query will skip the first 3 rows of the SampleFruits table and then return all remaining rows.

SELECT *
FROM Employees
ORDER BY Salary
OFFSET 0 ROWS FETCH NEXT 6 ROWS ONLY

SELECT *
FROM Employees
ORDER BY (SELECT NULL)
OFFSET 1 ROWS FETCH NEXT 3 ROWS ONLY


DECLARE @PageNumber AS INT
DECLARE @RowsOfPage AS INT
DECLARE @MaxTablePage  AS FLOAT 
SET @PageNumber=1
SET @RowsOfPage=1
SELECT @MaxTablePage = COUNT(*) FROM Employees
SET @MaxTablePage = CEILING(@MaxTablePage/@RowsOfPage)
WHILE @MaxTablePage >= @PageNumber
BEGIN
SELECT * FROM Employees
ORDER BY Salary 
OFFSET (@PageNumber-1)*@RowsOfPage ROWS
FETCH NEXT @RowsOfPage ROWS ONLY
SET @PageNumber = @PageNumber + 1
END

24.SQL Transactions

Transaction Control
The following commands are used to control transactions.

COMMIT − to save the changes.

ROLLBACK − to roll back the changes.

SAVEPOINT − creates points within the groups of transactions in which to ROLLBACK.

Transactional Control Commands
Transactional control commands are only used with the DML Commands such as - INSERT, UPDATE and DELETE only. They cannot be used while creating tables or dropping them because these operations are automatically committed in the database.

The COMMIT Command
The COMMIT command is the transactional command used to save changes invoked by a transaction to the database.

The COMMIT command is the transactional command used to save changes invoked by a transaction to the database. The COMMIT command saves all the transactions to the database since the last COMMIT or ROLLBACK command.

SET TRANSACTION − Places a name on a transaction.